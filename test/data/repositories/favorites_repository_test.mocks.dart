// Mocks generated by Mockito 5.0.9 from annotations
// in watchlist/test/data/repositories/favorites_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:typed_data' as _i8;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:cloud_firestore_platform_interface/src/get_options.dart' as _i6;
import 'package:cloud_firestore_platform_interface/src/persistence_settings.dart'
    as _i7;
import 'package:cloud_firestore_platform_interface/src/set_options.dart' as _i9;
import 'package:cloud_firestore_platform_interface/src/settings.dart' as _i4;
import 'package:firebase_core/firebase_core.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

import 'favorites_repository_test.dart' as _i10;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeFirebaseFirestore extends _i1.Fake implements _i2.FirebaseFirestore {
}

class _FakeDocumentReference<T extends Object?> extends _i1.Fake
    implements _i2.DocumentReference<T> {}

class _FakeCollectionReference<T extends Object?> extends _i1.Fake
    implements _i2.CollectionReference<T> {}

class _FakeQuery<T extends Object?> extends _i1.Fake implements _i2.Query<T> {}

class _FakeQuerySnapshot<T extends Object?> extends _i1.Fake
    implements _i2.QuerySnapshot<T> {}

class _FakeFirebaseApp extends _i1.Fake implements _i3.FirebaseApp {}

class _FakeSettings extends _i1.Fake implements _i4.Settings {}

class _FakeWriteBatch extends _i1.Fake implements _i2.WriteBatch {}

class _FakeLoadBundleTask extends _i1.Fake implements _i2.LoadBundleTask {}

class _FakeDocumentSnapshot<T extends Object?> extends _i1.Fake
    implements _i2.DocumentSnapshot<T> {}

class _FakeSnapshotMetadata extends _i1.Fake implements _i2.SnapshotMetadata {}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference extends _i1.Mock
    implements _i2.CollectionReference<Map<String, dynamic>> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore()) as _i2.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i5.Future<_i2.DocumentReference<Map<String, dynamic>>> add(
          Map<String, dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#add, [data]),
              returnValue:
                  Future<_i2.DocumentReference<Map<String, dynamic>>>.value(
                      _FakeDocumentReference<Map<String, dynamic>>()))
          as _i5.Future<_i2.DocumentReference<Map<String, dynamic>>>);
  @override
  _i2.DocumentReference<Map<String, dynamic>> doc([String? path]) =>
      (super.noSuchMethod(Invocation.method(#doc, [path]),
              returnValue: _FakeDocumentReference<Map<String, dynamic>>())
          as _i2.DocumentReference<Map<String, dynamic>>);
  @override
  _i2.CollectionReference<R> withConverter<R extends Object?>(
          {_i2.FromFirestore<R>? fromFirestore,
          _i2.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeCollectionReference<R>())
          as _i2.CollectionReference<R>);
  @override
  _i2.Query<Map<String, dynamic>> endAtDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(Invocation.method(#endAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> endAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endAt, [values]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> endBeforeDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#endBeforeDocument, [documentSnapshot]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> endBefore(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endBefore, [values]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i5.Future<_i2.QuerySnapshot<Map<String, dynamic>>> get(
          [_i6.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
          returnValue: Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
              _FakeQuerySnapshot<Map<String, dynamic>>())) as _i5
          .Future<_i2.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i2.Query<Map<String, dynamic>> limit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limit, [limit]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> limitToLast(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limitToLast, [limit]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i5.Stream<_i2.QuerySnapshot<Map<String, dynamic>>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue:
                  Stream<_i2.QuerySnapshot<Map<String, dynamic>>>.empty())
          as _i5.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i2.Query<Map<String, dynamic>> orderBy(Object? field,
          {bool? descending = false}) =>
      (super.noSuchMethod(
              Invocation.method(#orderBy, [field], {#descending: descending}),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> startAfterDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAfterDocument, [documentSnapshot]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> startAfter(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAfter, [values]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> startAtDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> startAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAt, [values]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> where(Object? field,
          {Object? isEqualTo,
          Object? isNotEqualTo,
          Object? isLessThan,
          Object? isLessThanOrEqualTo,
          Object? isGreaterThan,
          Object? isGreaterThanOrEqualTo,
          Object? arrayContains,
          List<Object?>? arrayContainsAny,
          List<Object?>? whereIn,
          List<Object?>? whereNotIn,
          bool? isNull}) =>
      (super.noSuchMethod(
              Invocation.method(#where, [
                field
              ], {
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull
              }),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i2.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp()) as _i3.FirebaseApp);
  @override
  set app(_i3.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set settings(_i4.Settings? settings) =>
      super.noSuchMethod(Invocation.setter(#settings, settings),
          returnValueForMissingStub: null);
  @override
  _i4.Settings get settings => (super.noSuchMethod(Invocation.getter(#settings),
      returnValue: _FakeSettings()) as _i4.Settings);
  @override
  int get hashCode =>
      (super.noSuchMethod(Invocation.getter(#hashCode), returnValue: 0) as int);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i2.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  _i2.WriteBatch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
      returnValue: _FakeWriteBatch()) as _i2.WriteBatch);
  @override
  _i5.Future<void> clearPersistence() =>
      (super.noSuchMethod(Invocation.method(#clearPersistence, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> enablePersistence(
          [_i7.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#enablePersistence, [persistenceSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i2.LoadBundleTask loadBundle(_i8.Uint8List? bundle) =>
      (super.noSuchMethod(Invocation.method(#loadBundle, [bundle]),
          returnValue: _FakeLoadBundleTask()) as _i2.LoadBundleTask);
  @override
  _i5.Future<_i2.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
          String? name,
          {_i6.GetOptions? options = const _i6.GetOptions()}) =>
      (super.noSuchMethod(
          Invocation.method(#namedQueryGet, [name], {#options: options}),
          returnValue: Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
              _FakeQuerySnapshot<Map<String, dynamic>>())) as _i5
          .Future<_i2.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i2.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collectionGroup, [collectionPath]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i5.Future<void> disableNetwork() =>
      (super.noSuchMethod(Invocation.method(#disableNetwork, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i2.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(Invocation.method(#doc, [documentPath]),
              returnValue: _FakeDocumentReference<Map<String, dynamic>>())
          as _i2.DocumentReference<Map<String, dynamic>>);
  @override
  _i5.Future<void> enableNetwork() =>
      (super.noSuchMethod(Invocation.method(#enableNetwork, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Stream<void> snapshotsInSync() =>
      (super.noSuchMethod(Invocation.method(#snapshotsInSync, []),
          returnValue: Stream<void>.empty()) as _i5.Stream<void>);
  @override
  _i5.Future<T> runTransaction<T>(_i2.TransactionHandler<T>? transactionHandler,
          {Duration? timeout = const Duration(seconds: 30)}) =>
      (super.noSuchMethod(
          Invocation.method(
              #runTransaction, [transactionHandler], {#timeout: timeout}),
          returnValue: Future<T>.value(null)) as _i5.Future<T>);
  @override
  _i5.Future<void> terminate() =>
      (super.noSuchMethod(Invocation.method(#terminate, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> waitForPendingWrites() =>
      (super.noSuchMethod(Invocation.method(#waitForPendingWrites, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  bool operator ==(Object? other) =>
      (super.noSuchMethod(Invocation.method(#==, [other]), returnValue: false)
          as bool);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference extends _i1.Mock
    implements _i2.DocumentReference<Map<String, dynamic>> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore()) as _i2.FirebaseFirestore);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i2.CollectionReference<Map<String, dynamic>> get parent =>
      (super.noSuchMethod(Invocation.getter(#parent),
              returnValue: _FakeCollectionReference<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i2.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  _i5.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> update(Map<String, Object?>? data) =>
      (super.noSuchMethod(Invocation.method(#update, [data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i2.DocumentSnapshot<Map<String, dynamic>>> get(
          [_i6.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
          returnValue: Future<_i2.DocumentSnapshot<Map<String, dynamic>>>.value(
              _FakeDocumentSnapshot<Map<String, dynamic>>())) as _i5
          .Future<_i2.DocumentSnapshot<Map<String, dynamic>>>);
  @override
  _i5.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue:
                  Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty())
          as _i5.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>);
  @override
  _i5.Future<void> set(Map<String, dynamic>? data, [_i9.SetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#set, [data, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i2.DocumentReference<R> withConverter<R>(
          {_i2.FromFirestore<R>? fromFirestore,
          _i2.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeDocumentReference<R>())
          as _i2.DocumentReference<R>);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReferenceString extends _i1.Mock
    implements _i2.DocumentReference<String> {
  MockDocumentReferenceString() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore()) as _i2.FirebaseFirestore);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i2.CollectionReference<String> get parent =>
      (super.noSuchMethod(Invocation.getter(#parent),
              returnValue: _FakeCollectionReference<String>())
          as _i2.CollectionReference<String>);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i2.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference<Map<String, dynamic>>())
          as _i2.CollectionReference<Map<String, dynamic>>);
  @override
  _i5.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> update(Map<String, Object?>? data) =>
      (super.noSuchMethod(Invocation.method(#update, [data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i2.DocumentSnapshot<String>> get([_i6.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: Future<_i2.DocumentSnapshot<String>>.value(
                  _FakeDocumentSnapshot<String>()))
          as _i5.Future<_i2.DocumentSnapshot<String>>);
  @override
  _i5.Stream<_i2.DocumentSnapshot<String>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: Stream<_i2.DocumentSnapshot<String>>.empty())
          as _i5.Stream<_i2.DocumentSnapshot<String>>);
  @override
  _i5.Future<void> set(String? data, [_i9.SetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#set, [data, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i2.DocumentReference<R> withConverter<R>(
          {_i2.FromFirestore<R>? fromFirestore,
          _i2.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeDocumentReference<R>())
          as _i2.DocumentReference<R>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot extends _i1.Mock
    implements _i2.DocumentSnapshot<Map<String, dynamic>> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i2.DocumentReference<Map<String, dynamic>> get reference =>
      (super.noSuchMethod(Invocation.getter(#reference),
              returnValue: _FakeDocumentReference<Map<String, dynamic>>())
          as _i2.DocumentReference<Map<String, dynamic>>);
  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata()) as _i2.SnapshotMetadata);
  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);
  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));
  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}

/// A class which mocks [Query].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuery extends _i1.Mock implements _i2.Query<Map<String, dynamic>> {
  MockQuery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore()) as _i2.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i2.Query<Map<String, dynamic>> endAtDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(Invocation.method(#endAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> endAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endAt, [values]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> endBeforeDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#endBeforeDocument, [documentSnapshot]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> endBefore(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endBefore, [values]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i5.Future<_i2.QuerySnapshot<Map<String, dynamic>>> get(
          [_i6.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
          returnValue: Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
              _FakeQuerySnapshot<Map<String, dynamic>>())) as _i5
          .Future<_i2.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i2.Query<Map<String, dynamic>> limit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limit, [limit]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> limitToLast(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limitToLast, [limit]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i5.Stream<_i2.QuerySnapshot<Map<String, dynamic>>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue:
                  Stream<_i2.QuerySnapshot<Map<String, dynamic>>>.empty())
          as _i5.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i2.Query<Map<String, dynamic>> orderBy(Object? field,
          {bool? descending = false}) =>
      (super.noSuchMethod(
              Invocation.method(#orderBy, [field], {#descending: descending}),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> startAfterDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAfterDocument, [documentSnapshot]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> startAfter(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAfter, [values]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> startAtDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> startAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAt, [values]),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<Map<String, dynamic>> where(Object? field,
          {Object? isEqualTo,
          Object? isNotEqualTo,
          Object? isLessThan,
          Object? isLessThanOrEqualTo,
          Object? isGreaterThan,
          Object? isGreaterThanOrEqualTo,
          Object? arrayContains,
          List<Object?>? arrayContainsAny,
          List<Object?>? whereIn,
          List<Object?>? whereNotIn,
          bool? isNull}) =>
      (super.noSuchMethod(
              Invocation.method(#where, [
                field
              ], {
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull
              }),
              returnValue: _FakeQuery<Map<String, dynamic>>())
          as _i2.Query<Map<String, dynamic>>);
  @override
  _i2.Query<R> withConverter<R>(
          {_i2.FromFirestore<R>? fromFirestore,
          _i2.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
          Invocation.method(#withConverter, [],
              {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
          returnValue: _FakeQuery<R>()) as _i2.Query<R>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot extends _i1.Mock
    implements _i2.QuerySnapshot<Map<String, dynamic>> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.QueryDocumentSnapshot<Map<String, dynamic>>> get docs =>
      (super.noSuchMethod(Invocation.getter(#docs),
              returnValue: <_i2.QueryDocumentSnapshot<Map<String, dynamic>>>[])
          as List<_i2.QueryDocumentSnapshot<Map<String, dynamic>>>);
  @override
  List<_i2.DocumentChange<Map<String, dynamic>>> get docChanges =>
      (super.noSuchMethod(Invocation.getter(#docChanges),
              returnValue: <_i2.DocumentChange<Map<String, dynamic>>>[])
          as List<_i2.DocumentChange<Map<String, dynamic>>>);
  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata()) as _i2.SnapshotMetadata);
  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryDocumentSnapshot extends _i1.Mock
    implements _i2.QueryDocumentSnapshot<Map<String, dynamic>> {
  MockQueryDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i2.DocumentReference<Map<String, dynamic>> get reference =>
      (super.noSuchMethod(Invocation.getter(#reference),
              returnValue: _FakeDocumentReference<Map<String, dynamic>>())
          as _i2.DocumentReference<Map<String, dynamic>>);
  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata()) as _i2.SnapshotMetadata);
  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);
  @override
  Map<String, dynamic> data() =>
      (super.noSuchMethod(Invocation.method(#data, []),
          returnValue: _i10.dataShim()) as Map<String, dynamic>);
  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));
  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshotString extends _i1.Mock
    implements _i2.DocumentSnapshot<String> {
  MockDocumentSnapshotString() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i2.DocumentReference<String> get reference =>
      (super.noSuchMethod(Invocation.getter(#reference),
              returnValue: _FakeDocumentReference<String>())
          as _i2.DocumentReference<String>);
  @override
  _i2.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata()) as _i2.SnapshotMetadata);
  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);
  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));
  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}
